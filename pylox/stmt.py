# This file is autogenerated from generator.py
# Do not manually change it.

from __future__ import annotations  # NOTE: No need since python 3.10+
from typing import Protocol, TypeVar
import expr as e


T_co = TypeVar("T_co", covariant=True)
T = TypeVar("T")


class Visitor(Protocol[T_co]):
    def visit_expression_stmt(self, stmt: Expression) -> T_co:
        ...

    def visit_print_stmt(self, stmt: Print) -> T_co:
        ...


class Stmt(Protocol[T]):
    def accept(self, visitor: Visitor[T]) -> T:
        ...


class Expression:
    def __init__(self, expression: e.Expr):
        self.expression = expression

    def accept(self, visitor: Visitor[T_co]) -> T_co:
        return visitor.visit_expression_stmt(self)


class Print:
    def __init__(self, expression: e.Expr):
        self.expression = expression

    def accept(self, visitor: Visitor[T_co]) -> T_co:
        return visitor.visit_print_stmt(self)
